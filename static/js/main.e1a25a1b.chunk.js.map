{"version":3,"sources":["components/Weather/Weatherdata.js","components/Weather/WeatherForm.js","components/Weather/WeatherApp.js","App.js","serviceWorker.js","index.js"],"names":["Weatherdata","props","console","log","country","className","city","weatherIcon","temperature","class","description","mintemperature","maxtemperature","Date","toLocaleTimeString","toLocaleDateString","WeatherForm","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","WeatherApp","getWeather","e","a","preventDefault","target","elements","value","fetch","apiCall","json","response","sys","setState","calCelcius","main","temp","temp_min","temp_max","weather","getWeatherIcon","id","undefined","state","icon","Thunderstrom","Drizzel","Rain","Snow","Atmoshpere","Clear","Clouds","countryname","Math","floor","icons","rangeId","this","React","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e1a25a1b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weatherdata = (props) => {\r\n  console.log(\"props\", props);\r\n  // const iconurl =\"http://openweathermap.org/img/wn/\" + `${props.weather[0].icon}` + \".png\";\r\n  return (\r\n    <>\r\n      {props.country ? (\r\n        <div className=\"container \">\r\n          <div className=\"card\">\r\n            <div className=\"api-data\">\r\n              <h1>\r\n                {props.city} <span className=\"countrybox\">{props.country}</span>{\" \"}\r\n              </h1>\r\n              {/* <img src={props.icon} alt=\"weathericon\" className=\"icon\" /> */}\r\n              {console.log(props.weatherIcon)}\r\n              {props.temperature ? (\r\n                <>\r\n                  {\" \"}\r\n                  <h3>\r\n                    {props.temperature}\r\n                    <sup>oC</sup>\r\n                  </h3>\r\n                  <i class={`fas ${props.weatherIcon}`}></i>\r\n                  <p className=\"\">{props.description}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              <div className=\"minmax\">\r\n                {props.mintemperature ? (\r\n                  <h5>\r\n                    Min {props.mintemperature}&deg;<sup>C</sup>\r\n                  </h5>\r\n                ) : null}\r\n                {props.maxtemperature ? (\r\n                  <h5 className=\"max\">\r\n                    Max {props.maxtemperature}&deg;<sup>C</sup>\r\n                  </h5>\r\n                ) : null}\r\n              </div>\r\n              <p>\r\n                As of {new Date().toLocaleTimeString()} IST{\" \"}\r\n                {new Date().toLocaleDateString()}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          {/* <img src={Wimg} alt=\"Weatherimage\" /> */}\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weatherdata;\r\n","import React from \"react\";\r\n\r\nconst WeatherForm = (props) => {\r\n  function error() {\r\n    return (\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        {props.error}\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"title\">\r\n        <h1>Simple Weather App</h1>\r\n      </div>\r\n      <div className=\"error-msg\"> {props.error ? error() : null} </div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"form-data\">\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"inp\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n            {/* <ul>\r\n                                {props.countryname.map( (countryname) => <li> {countryname} </li>)}\r\n                            </ul> */}\r\n          </div>\r\n          <div className=\"inp\">\r\n            <button className=\"btn\"> SUBMIT</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForm;\r\n","import React from \"react\";\r\nimport Weather from \"./Weatherdata\";\r\nimport \"./Weather.css\";\r\nimport WeatherForm from \"./WeatherForm\";\r\n\r\nconst apiKey = \"25e79ea94dba8c093f1a62a7775280f4\";\r\n\r\nclass WeatherApp extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      temperature: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      mintemperature: undefined,\r\n      maxtemperature: undefined,\r\n      description: undefined,\r\n      icon: undefined,\r\n      error: undefined,\r\n    };\r\n    // this.getWeather();\r\n    this.weatherIcon = {\r\n      Thunderstrom: \"fa-bolt\",\r\n      Drizzel: \"fa-cloud-rain\",\r\n      Rain: \"fa-cloud-showers-heavy\",\r\n      Snow: \"fa-snowflake\",\r\n      Atmoshpere: \"fa-smog\",\r\n      Clear: \"fa-sun\",\r\n      Clouds: \"fa-cloud\",\r\n    };\r\n    this.countryname = [];\r\n  }\r\n\r\n  calCelcius(temperature) {\r\n    let cel = Math.floor(temperature - 273.15);\r\n    return cel;\r\n  }\r\n\r\n  getWeatherIcon(icons, rangeId) {\r\n    switch (true) {\r\n      case rangeId >= 200 && rangeId <= 232:\r\n        this.setState({ icon: this.weatherIcon.Thunderstrom });\r\n        break;\r\n\r\n      case rangeId >= 300 && rangeId <= 321:\r\n        this.setState({ icon: this.weatherIcon.Drizzel });\r\n        break;\r\n\r\n      case rangeId >= 500 && rangeId <= 531:\r\n        this.setState({ icon: this.weatherIcon.Rain });\r\n        break;\r\n\r\n      case rangeId >= 600 && rangeId <= 622:\r\n        this.setState({ icon: this.weatherIcon.Snow });\r\n        break;\r\n\r\n      case rangeId >= 701 && rangeId <= 781:\r\n        this.setState({ icon: this.weatherIcon.Atmoshpere });\r\n        break;\r\n\r\n      case rangeId === 800:\r\n        this.setState({ icon: this.weatherIcon.Clear });\r\n        break;\r\n\r\n      case rangeId >= 801 && rangeId <= 804:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n        break;\r\n      default:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n    }\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    // const iconurl =\"https://openweathermap.org/img/wn/\" + `${props.weather[0].icon}` + \".png\";\r\n\r\n    if (city && country) {\r\n      const apiCall = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${apiKey} `\r\n      );\r\n\r\n      const response = await apiCall.json();\r\n      if (response.sys && response.sys.country) {\r\n        this.setState({\r\n          city: `${response.name}`,\r\n          country: `${response.sys.country}`,\r\n          temperature: this.calCelcius(response.main.temp),\r\n          mintemperature: this.calCelcius(response.main.temp_min),\r\n          maxtemperature: this.calCelcius(response.main.temp_max),\r\n          description: response.weather[0].description,\r\n          // icon: \"http://openweathermap.org/img/wn/\" + `${response.weather[0].icon}` + \".png\",\r\n          error: false,\r\n        });\r\n        this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\r\n      } else {\r\n        this.setState({\r\n          error: \"!! Please Check City or Country Name\",\r\n          temperature: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          mintemperature: undefined,\r\n          maxtemperature: undefined,\r\n          description: undefined,\r\n        });\r\n      }\r\n      console.log(\"=====>\", this.state.icon);\r\n    } else {\r\n      this.setState({\r\n        error: \"Please Fill all field.\",\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        mintemperature: undefined,\r\n        maxtemperature: undefined,\r\n        description: undefined,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weather\">\r\n        <WeatherForm\r\n          loadweather={this.getWeather}\r\n          error={this.state.error}\r\n          countryname={this.countryname}\r\n        />\r\n        <Weather\r\n          weatherIcon={this.state.icon}\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          temperature={this.state.temperature}\r\n          mintemperature={this.state.mintemperature}\r\n          maxtemperature={this.state.maxtemperature}\r\n          description={this.state.description}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const apiKey = \"8ddceeacaf8b95fe943c88fc8389dee0\";\r\n\r\n// const Title = () => {\r\n//   return (\r\n//     <div>\r\n//       <h1 className=\"title-container__title\">Weather Finder</h1>\r\n//       <h3 className=\"title-container__subtitle\">\r\n//         Find out temperature, conditions and more...\r\n//       </h3>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Form = ({ onWeather }) => {\r\n//   return (\r\n//     <form onSubmit={e => onWeather(e)}>\r\n//       <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n//       <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n//       <button className=\"form-button\">get Weather</button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// const WeatherApp = () => {\r\n//   const [weather, getWeather]= useState([\r\n//     {\r\n//       temperature: undefined,\r\n//       city: undefined,\r\n//       country: undefined,\r\n//       humidity: undefined,\r\n//       description: undefined,\r\n//       error: undefined\r\n//     }\r\n//   ]);\r\n\r\n//   getWeather = async e => {\r\n//     e.preventDefault();\r\n//     const city = e.currentTarget.elements.city.value;\r\n//     const country = e.currentTarget.elements.country.value;\r\n//     if (city && country) {\r\n//       try {\r\n//         const apiCall = await fetch(\r\n//           `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`\r\n//         );\r\n//         const { main, sys, name, weather } = await apiCall.json();\r\n//         this.setState({\r\n//           temperature: main.temp,\r\n//           city: name,\r\n//           country: sys.country,\r\n//           humidity: main.humidity,\r\n//           description: weather[0].description,\r\n//           error: \"\"\r\n//         });\r\n//       } catch (ex) {\r\n//         console.log(ex.message);\r\n//       }\r\n//     } else {\r\n//       this.setState({\r\n//         temperature: undefined,\r\n//         city: undefined,\r\n//         country: undefined,\r\n//         humidity: undefined,\r\n//         description: undefined,\r\n//         error: \"please enter a valid values.\"\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//     return (\r\n//       <div className=\"wrapper\">\r\n//         <div className=\"main\">\r\n//           <div className=\"container\" style={{ width: \"100%\" }}>\r\n//             <div className=\"row\">\r\n//               <div className=\"col-xs-5 title-container\">\r\n//                 <Title />\r\n//               </div>\r\n//               <div className=\"col-xs-7 form-container\">\r\n//                 <Form onWeather={this.getWeather} />\r\n//                 <Weather\r\n//                   temperature={this.state.temperature}\r\n//                   city={this.state.city}\r\n//                   country={this.state.country}\r\n//                   humidity={this.state.humidity}\r\n//                   description={this.state.description}\r\n//                   error={this.state.error}\r\n//                 />\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n\r\n// }\r\n\r\nexport default WeatherApp;\r\n","import React from 'react';\nimport './App.css';\nimport WeatherApp from './components/Weather/WeatherApp';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';;\n\n\n                                                    \n\n\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={WeatherApp} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}